{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "allPairs",
				"outputs": [
					{
						"internalType": "address",
						"name": "pair",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "allPairsLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "priceA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "priceB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "createPair",
				"outputs": [
					{
						"internalType": "address",
						"name": "pair",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeTo",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeToSetter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "getPair",
				"outputs": [
					{
						"internalType": "address",
						"name": "pair",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "govBr",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "setFeeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "setFeeToSetter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "SaSi team",
			"kind": "dev",
			"methods": {},
			"title": "SaSiFactory",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "Since this contract will be inside a permissioned EVM-compatible blockchain, we, therefore, decided to make some assumptions. NOTE that removing these assumptions make this contract to be vulnerable to be deployed in any EVM-compatible mainnet. The assumptions are below: 1. only Brazil's government will be able to create pools. 2. the pair to be created will always be composed of an ERC20-like contract and an ERC1155. This contract will always support the supportsInterface function as any of the most recent ERC20s do. This is key to determining the sorting of the tokens in the pool. 3. `amount1` and `amount0` will represent the initial price in between token0 and token1, where token0 is always an ERC20-like token and token1 is an ERC1155-like token.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"flat_factory.sol": "ISaSiFactory"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"flat_factory.sol": {
			"keccak256": "0xc5bf2370cd125ff9d4a83a1160bfb09014a2354c11c5b43c212ccc5e3d247c06",
			"urls": [
				"bzz-raw://036738020e258f8d7dbeec66c67ac97d65af31345c369416bd0b6df516716886",
				"dweb:/ipfs/QmdTon7EPVDGtbFkvX157roPCSx988QoMZyV7JRFWsTSo7"
			]
		}
	},
	"version": 1
}